import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_swiss_roll
from sklearn.decomposition import KernelPCA
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import KBinsDiscretizer
# Generate Swiss roll dataset
X, y = make_swiss_roll(n_samples=1000, noise=0.1)

# Plotting the Swiss roll dataset
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X[:, 0], X[:, 1], X[:, 2], c=y, cmap=plt.cm.Spectral)
ax.set_title("Swiss Roll Dataset")
plt.show()

# Standardize the dataset
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Apply Kernel PCA with Linear Kernel
kpca_linear = KernelPCA(n_components=2, kernel='linear')
X_kpca_linear = kpca_linear.fit_transform(X_scaled)

# Apply Kernel PCA with RBF Kernel
kpca_rbf = KernelPCA(n_components=2, kernel='rbf', gamma=0.1)
X_kpca_rbf = kpca_rbf.fit_transform(X_scaled)

# Apply Kernel PCA with Sigmoid Kernel
kpca_sigmoid = KernelPCA(n_components=2, kernel='sigmoid', gamma=0.1)
X_kpca_sigmoid = kpca_sigmoid.fit_transform(X_scaled)

# Plot the Kernel PCA results
fig, axes = plt.subplots(1, 3, figsize=(18, 6))

# Plot Linear Kernel PCA
axes[0].scatter(X_kpca_linear[:, 0], X_kpca_linear[:, 1], c=y, cmap=plt.cm.Spectral)
axes[0].set_title("KPCA with Linear Kernel")

# Plot RBF Kernel PCA
axes[1].scatter(X_kpca_rbf[:, 0], X_kpca_rbf[:, 1], c=y, cmap=plt.cm.Spectral)
axes[1].set_title("KPCA with RBF Kernel")

# Plot Sigmoid Kernel PCA
axes[2].scatter(X_kpca_sigmoid[:, 0], X_kpca_sigmoid[:, 1], c=y, cmap=plt.cm.Spectral)
axes[2].set_title("KPCA with Sigmoid Kernel")

plt.show()

# Pipeline for Logistic Regression with GridSearchCV
discretizer = KBinsDiscretizer(n_bins=2, encode='ordinal', strategy='uniform')
y_discretized = discretizer.fit_transform(y.reshape(-1, 1)).ravel()

pipeline = Pipeline([
    ('kpca', KernelPCA(n_components=2)),
    ('logistic', LogisticRegression())
])

param_grid = {
    'kpca__kernel': ['linear', 'rbf', 'sigmoid'],
    'kpca__gamma': np.logspace(-2, 1, 5)
}

grid_search = GridSearchCV(pipeline, param_grid, cv=5)
grid_search.fit(X_scaled, y_discretized)

best_params = grid_search.best_params_
print("Best parameters found by GridSearchCV:", best_params)

